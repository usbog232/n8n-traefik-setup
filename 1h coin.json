{
  "name": "1 hour+sma",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "61984442-5bda-42b7-9857-95504d376125",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1120,
        220
      ],
      "webhookId": "3e6f3793-1deb-4f9f-a07c-d081d1211385",
      "credentials": {
        "telegramApi": {
          "id": "hIRaaAjhIdI4Vd4r",
          "name": "cointest"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "userInputRaw",
              "value": "={{$json[\"message\"][\"text\"]}}"
            },
            {
              "name": "userInputLower",
              "value": "={{$json[\"message\"][\"text\"].toLowerCase()}}"
            },
            {
              "name": "chatId",
              "value": "={{$json[\"message\"][\"chat\"][\"id\"]}}"
            },
            {
              "name": "userInputUpper",
              "value": "={{ $json[\"message\"][\"text\"].trim().toUpperCase().replace(/[^A-Z0-9]/g, \"\") + \"USDT\" }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ce491d23-cd2a-4987-a20d-349ad612925d",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -960,
        220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json[\"isValid\"]}}",
              "value2": true
            }
          ]
        }
      },
      "id": "d8c6559b-17ce-4d2e-ac4d-e456d3092355",
      "name": "IF Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -640,
        220
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json[\"chatId\"]}}",
        "text": "=‚úÖ Â∑≤ËØÜÂà´‰∏∫ {{$json[\"userInputLower\"]}}ÔºåÊ≠£Âú®ËøõË°åÂä†ÂØÜË¥ßÂ∏ÅÂàÜÊûê...",
        "additionalFields": {}
      },
      "id": "26c361ae-47e5-43f1-aed0-3a2bdfa33a68",
      "name": "Valid Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -500,
        20
      ],
      "webhookId": "8d7bcfbf-577e-459c-b98b-adb9fe625dc7",
      "credentials": {
        "telegramApi": {
          "id": "hIRaaAjhIdI4Vd4r",
          "name": "cointest"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{$json[\"chatId\"]}}",
        "text": "‚ö†Ô∏è ÊöÇ‰∏çÊîØÊåÅËØ•Â∏ÅÁßçÔºåËØ∑ËæìÂÖ•Â¶Ç eth„ÄÅbtc„ÄÅsol„ÄÅarb...",
        "additionalFields": {}
      },
      "id": "bed3654e-b33c-4267-9c0c-d27c66a4c9c8",
      "name": "Invalid Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -480,
        320
      ],
      "webhookId": "981b5b39-b10a-4bb4-bb02-5a7e6df89ad8",
      "credentials": {
        "telegramApi": {
          "id": "hIRaaAjhIdI4Vd4r",
          "name": "cointest"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// ‚úÖ Check Token in Array ËäÇÁÇπ‰ª£Á†ÅÊõ¥Êñ∞‰∏∫Ââç 200 ÁöÑ‰∏ªÊµÅÂ∏ÅÁßçÊîØÊåÅÈ™åËØÅ\nconst validTokens = [\n  \"btc\", \"eth\", \"bnb\", \"sol\", \"usdt\", \"usdc\", \"xrp\", \"doge\", \"ton\", \"ada\",\n  \"avax\", \"shib\", \"dot\", \"trx\", \"link\", \"wbtc\", \"matic\", \"uni\", \"bch\", \"ltc\",\n  \"near\", \"leo\", \"cro\", \"dai\", \"icp\", \"apt\", \"fil\", \"steth\", \"xmr\", \"atom\",\n  \"okb\", \"etc\", \"imx\", \"hbar\", \"rndr\", \"egld\", \"vet\", \"mantle\", \"ar\", \"ftm\",\n  \"kas\", \"op\", \"gala\", \"aave\", \"inj\", \"algo\", \"qnt\", \"flow\", \"sui\", \"tao\",\n  \"mina\", \"jito\", \"theta\", \"mkr\", \"snx\", \"bgb\", \"rpl\", \"kava\", \"chz\", \"xdai\",\n  \"zil\", \"ens\", \"blur\", \"bat\", \"one\", \"magic\", \"xec\", \"ocean\", \"render\", \"zrx\",\n  \"woo\", \"cvx\", \"amp\", \"band\", \"comp\", \"celo\", \"lpt\", \"yfi\", \"num\", \"ankr\",\n  \"cake\", \"bnt\", \"ziliqa\", \"ond\", \"nexo\", \"sfp\", \"qtum\", \"ckb\", \"rvn\", \"ogn\",\n  \"waves\", \"hnt\", \"storj\", \"api3\", \"fet\", \"agix\", \"lrc\", \"bico\", \"nxra\", \"bal\",\n  \"skl\", \"strk\", \"fxs\", \"hashflow\", \"movr\", \"bonk\", \"santos\", \"gas\", \"super\",\n  \"ssv\", \"joe\", \"astrafer\", \"ach\", \"ogn\", \"ogn\", \"ela\", \"nmr\", \"polyx\", \"id\",\n  \"mdx\", \"raca\", \"vra\", \"nkn\", \"xyo\", \"ever\", \"quack\", \"pundix\", \"glm\", \"spell\",\n  \"dar\", \"vtho\", \"tru\", \"trb\", \"dydx\", \"dexe\", \"umb\", \"inj\", \"mxc\", \"rep\",\n  \"barn\", \"pros\", \"lina\", \"data\", \"lina\", \"gmx\", \"sxp\", \"bel\", \"vite\", \"asto\",\n  \"ali\", \"oxt\", \"boba\", \"waxp\", \"reef\", \"nav\", \"xcn\", \"kmd\", \"krl\", \"slp\"\n];\n\nconst userInput = $json[\"userInputLower\"] || \"\";\nconst chatId = $json[\"chatId\"] || \"\";\n\nreturn [\n  {\n    json: {\n      chatId,\n      userInputLower: userInput,\n      isValid: validTokens.includes(userInput)\n    }\n  }\n];"
      },
      "id": "770cd4b2-817b-4277-84a3-4a6a81021c7d",
      "name": "Check Token in Array",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -800,
        220
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.aiPrompt }}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        500,
        360
      ],
      "id": "84b7d1d3-c050-4a06-9154-08ad6d17f8e4",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "deepseek-r1:1.5b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        600,
        600
      ],
      "id": "f95b306e-a0fe-42ac-8cc6-232d1d1548ea",
      "name": "Ollama Model",
      "credentials": {
        "ollamaApi": {
          "id": "xyFHlhcsAfJf9g6B",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{$node[\"Set Variables\"].json[\"chatId\"]}}",
        "text": "=üìä AI ÂàÜÊûêÊä•ÂëäÂ¶Ç‰∏ãÔºö\\n\\n{{$node[\"Basic LLM Chain\"].json[\"text\"]}}\n",
        "additionalFields": {}
      },
      "name": "Send Analysis To Telegram1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        860,
        360
      ],
      "id": "c3cc26a7-4de7-4aab-a199-3927b74afef3",
      "webhookId": "80428058-b37f-4644-97d4-dcb8ac5d5308",
      "credentials": {
        "telegramApi": {
          "id": "hIRaaAjhIdI4Vd4r",
          "name": "cointest"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-pro-001",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        440,
        140
      ],
      "id": "11845a4a-b19d-47a8-8ad5-c029e5169e10",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "Nm2skPr2xCGEvgZw",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.aiPrompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        420,
        -40
      ],
      "id": "1fa2ea89-40f4-4239-8ce1-e6559ef23765",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "chatId": "={{$node[\"Set Variables\"].json[\"chatId\"]}}",
        "text": "=ü§ñ AI ÂàÜÊûêÊä•ÂëäÂ¶Ç‰∏ãÔºö\\n\\n{{ $node[\"Code\"].json[\"text\"] }}\n\n",
        "additionalFields": {
          "parse_mode": "=HTML"
        }
      },
      "name": "Send Analysis To Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        880,
        -80
      ],
      "id": "346c48b4-ea3d-4423-9fd1-4f9ebdf38971",
      "webhookId": "80428058-b37f-4644-97d4-dcb8ac5d5308",
      "credentials": {
        "telegramApi": {
          "id": "hIRaaAjhIdI4Vd4r",
          "name": "cointest"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $json.output;\n\n// HTML ËΩ¨‰πâ\nconst escapeHTML = str => str\n  .replace(/&/g, \"&amp;\")\n  .replace(/</g, \"&lt;\")\n  .replace(/>/g, \"&gt;\");\n\n// Â§ÑÁêÜÂä†Á≤óÂíåÊç¢Ë°å ‚Üí Ê≥®ÊÑè `<br/>` Èó≠ÂêàÊ†áÁ≠æ\nconst htmlText = escapeHTML(raw)\n  .replace(/\\*\\*(.*?)\\*\\*/g, \"<b>$1</b>\")\n  .replace(/\\\\n/g, \"<br/>\");\n\nreturn [\n  {\n    json: {\n      text: htmlText\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        -80
      ],
      "id": "5a5f679a-c8c5-4d5a-aa4c-a8623718ccdd",
      "name": "Code"
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "904772b1-3eb4-4777-ab5d-7cc392a0272b",
      "name": "Merge 2 (1D+1W)4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -40,
        280
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "5d3d1825-7446-44fb-82c4-36f52bfb31d2",
      "name": "Merge 2 (1D+1W)5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        80,
        160
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "aeecf552-f828-4130-829a-fabce8ed1ce2",
      "name": "Merge 2 (1D+1W)6",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        -20,
        20
      ]
    },
    {
      "parameters": {
        "mode": "mergeByIndex"
      },
      "id": "7f7e4f7d-1ad7-43f1-bca5-e8fe2c33cf6f",
      "name": "Merge 2 (1D+1W)",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        180,
        20
      ]
    },
    {
      "parameters": {
        "functionCode": "// ‚úÖ ÂéüÂßã Bybit KÁ∫øÊï∞ÊçÆ\nconst klineList = $json.result?.list || [];\n\n// Êî∂Áõò‰ª∑‰∏éÊó∂Èó¥Êà≥Ôºà‰ªéÊñ∞Âà∞ÊóßÔºâ\nconst closes = klineList.map(k => parseFloat(k[4]));\nconst timestamps = klineList.map(k => parseInt(k[0]));\nconst limit = closes.length;\n\n// ‚úÖ ËΩ¨‰∏∫‰ªéÊóßÂà∞Êñ∞ÔºàÁî®‰∫éSMAËÆ°ÁÆóÔºâ\nconst closesReversed = closes.slice().reverse();\nconst timestampsReversed = timestamps.slice().reverse();\n\n// ‚úÖ SMAËÆ°ÁÆóÂáΩÊï∞ÔºàÊªëÂä®Âπ≥ÂùáÔºâ\nfunction calculateSMA(data, period) {\n  const sma = [];\n  for (let i = 0; i < data.length; i++) {\n    if (i < period - 1) {\n      sma.push(null);\n    } else {\n      const slice = data.slice(i - period + 1, i + 1);\n      const sum = slice.reduce((a, b) => a + b, 0);\n      sma.push(parseFloat((sum / period).toFixed(4)));\n    }\n  }\n  return sma;\n}\n\n// ‚úÖ ËÆ°ÁÆó SMA ÂÄºÔºàÂπ∂ÂèçËΩ¨ÂõûÊù•Ôºâ\nconst sma14 = calculateSMA(closesReversed, 14).reverse();\nconst sma28 = calculateSMA(closesReversed, 28).reverse();\nconst sma60 = calculateSMA(closesReversed, 60).reverse();\nconst sma120 = calculateSMA(closesReversed, 120).reverse();\n\n// ‚úÖ UTC Êó∂Èó¥Ê†ºÂºèÂåñÔºàÁ≤æÁ°ÆÂà∞Â∞èÊó∂Ôºâ\nfunction formatUTCWithHour(ms) {\n  const d = new Date(ms);\n  const year = d.getUTCFullYear();\n  const month = String(d.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(d.getUTCDate()).padStart(2, '0');\n  const hour = String(d.getUTCHours()).padStart(2, '0');\n  const minute = String(d.getUTCMinutes()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${minute}`;\n}\n\n// ‚úÖ ËæìÂá∫ÁªìÊûúÔºàindex: ÊúÄÊñ∞‰∏∫1Ôºâ\nconst smaList = closes.map((close, i) => ({\n  index: i + 1,\n  date: formatUTCWithHour(timestamps[i]), // UTC+0ÔºåÁ≤æÁ°ÆÂà∞Â∞èÊó∂\n  close,\n  SMA14: sma14[i],\n  SMA28: sma28[i],\n  SMA60: sma60[i],\n  SMA120: sma120[i],\n}));\n\nreturn [\n  {\n    json: {\n      smaList,\n      total: limit,\n      note: \"UTC+0, with hour-level timestamp\"\n    }\n  }\n];\n"
      },
      "name": "sma14 28 60 120 1h",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -160,
        -40
      ],
      "id": "4f0a3eb8-42e5-4e9d-a0e5-a982a44f5f60"
    },
    {
      "parameters": {
        "functionCode": "// Ëé∑Âèñ Bybit K Á∫øÂàóË°®Ôºà‰∫åÁª¥Êï∞ÁªÑÔºâ\nconst klineList = $json.result.list;\n\n// Êî∂Áõò‰ª∑ÂíåÊó∂Èó¥Êà≥ÔºàÂéüÊï∞ÊçÆÊòØ‰ªéÊñ∞Âà∞ÊóßÔºâ\nconst closesOriginal = klineList.map(k => parseFloat(k[4]));\nconst timeOriginal = klineList.map(k => new Date(parseInt(k[0])));\n\n// ‚úÖ ‰øÆÊ≠£ÔºöÂèçËΩ¨‰∏∫‰ªéÊóßÂà∞Êñ∞ËÆ°ÁÆó\nconst closes = closesOriginal.slice().reverse();\nconst timestamps = timeOriginal.slice().reverse();\n\nconst limit = closes.length;\n\n// ‚úÖ EMA ËÆ°ÁÆóÂáΩÊï∞ÔºàÊ†áÂáÜÊåáÊï∞ÁßªÂä®Âπ≥ÂùáÔºâ\nfunction EMA(data, period) {\n  const k = 2 / (period + 1);\n  const emaArray = [data[0]];\n  for (let i = 1; i < data.length; i++) {\n    emaArray.push(data[i] * k + emaArray[i - 1] * (1 - k));\n  }\n  return emaArray;\n}\n\n// ‚úÖ Ê†ºÂºèÂåñ UTC Êó∂Èó¥Âà∞ ‚ÄúYYYY-MM-DD HH:00‚Äù\nfunction formatUTCDateToHour(dateObj) {\n  const iso = dateObj.toISOString(); // e.g., \"2025-04-20T01:00:00.000Z\"\n  const [date, time] = iso.split(\"T\");\n  const hour = time.split(\":\")[0];\n  return `${date} ${hour}:00`;\n}\n\n// ‚úÖ MACD ËÆ°ÁÆóÊ†∏ÂøÉÊµÅÁ®ã\nconst ema12 = EMA(closes, 12);\nconst ema26 = EMA(closes, 26);\nconst difArray = ema12.map((val, i) => val - ema26[i]);\nconst deaArray = EMA(difArray, 9);\nconst macdArray = difArray.map((val, i) => val - deaArray[i]);\n\n// ‚úÖ ËæìÂá∫Ôºàindex 0 ÊòØÊúÄÊñ∞Ôºâ\nconst macdList = difArray.map((_, i) => ({\n  index: limit - i,  // ÊúÄÊñ∞ÁöÑÊòØ index 1\n  date: formatUTCDateToHour(timestamps[i]), // ËΩ¨‰∏∫ UTC Â∞èÊó∂Á∫ßÂà´Ê†ºÂºè\n  close: closes[i],\n  DIF: difArray[i].toFixed(4),\n  DEA: deaArray[i].toFixed(4),\n  histogram: macdArray[i].toFixed(4)\n})).reverse(); // ‚úÖ ÊúÄÁªàÂÜçÂèçËΩ¨ÂõûÊù•Ôºå‰øùËØÅ index 0 ÊòØÊúÄÊñ∞\n\nreturn [\n  {\n    json: {\n      macdList,\n      total: limit\n    }\n  }\n];\n"
      },
      "name": "MACD 1h",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -160,
        120
      ],
      "id": "0a031616-b865-4f4c-acaa-a126eb047e3a"
    },
    {
      "parameters": {
        "functionCode": "// ‚úÖ Ëé∑Âèñ K Á∫øÊï∞ÊçÆ\nconst klineList = $json.result.list;\n\n// ‚úÖ ÊèêÂèñÊî∂Áõò‰ª∑ÂíåÊó∂Èó¥Êà≥ÔºåÂπ∂ÂèçËΩ¨‰∏∫‰ªéÊóßÂà∞Êñ∞\nconst closes = klineList.map(k => parseFloat(k[4])).reverse();\nconst timestamps = klineList.map(k => parseInt(k[0])).reverse();\n\nconst total = closes.length;\n\n// ‚úÖ Êó∂Èó¥Ê†ºÂºèÂáΩÊï∞ÔºàUTC+0 Á≤æÁ°ÆÂà∞Â∞èÊó∂Ôºâ\nfunction formatUTCHour(ms) {\n  const d = new Date(ms);\n  const year = d.getUTCFullYear();\n  const month = String(d.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(d.getUTCDate()).padStart(2, '0');\n  const hour = String(d.getUTCHours()).padStart(2, '0');\n  const minute = String(d.getUTCMinutes()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:${minute}`;\n}\n\n// ‚úÖ ËÆ°ÁÆó RSIÔºà‰ΩøÁî® RMA Âπ≥ÊªëÔºâ\nfunction calculateRSI(closes, timestamps, period) {\n  const result = [];\n  let avgGain = 0, avgLoss = 0;\n\n  // ÂàùÂßãÂπ≥ÂùáÂÄºÔºàSMAÔºâ\n  for (let i = 1; i <= period; i++) {\n    const diff = closes[i] - closes[i - 1];\n    if (diff >= 0) avgGain += diff;\n    else avgLoss -= diff;\n  }\n\n  avgGain /= period;\n  avgLoss /= period;\n\n  let rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n  let rsi = 100 - (100 / (1 + rs));\n\n  result.push({\n    index: period + 1,\n    date: formatUTCHour(timestamps[period]),\n    close: closes[period],\n    RSI: rsi.toFixed(2)\n  });\n\n  // ÈÄíÊé®ÔºàRMA Âπ≥ÊªëÔºâ\n  for (let i = period + 1; i < closes.length; i++) {\n    const diff = closes[i] - closes[i - 1];\n    const gain = diff > 0 ? diff : 0;\n    const loss = diff < 0 ? -diff : 0;\n\n    avgGain = (avgGain * (period - 1) + gain) / period;\n    avgLoss = (avgLoss * (period - 1) + loss) / period;\n\n    rs = avgLoss === 0 ? 100 : avgGain / avgLoss;\n    rsi = 100 - (100 / (1 + rs));\n\n    result.push({\n      index: i + 1,\n      date: formatUTCHour(timestamps[i]),\n      close: closes[i],\n      RSI: rsi.toFixed(2)\n    });\n  }\n\n  return result.reverse(); // ‚úÖ ÊúÄÊñ∞Âú®ÊúÄ‰∏ä\n}\n\n// ‚úÖ ËæìÂá∫ RSI14 Âíå RSI30\nconst rsi14 = calculateRSI(closes, timestamps, 14);\nconst rsi30 = calculateRSI(closes, timestamps, 30);\n\nreturn [\n  {\n    json: {\n      rsi14,\n      rsi30,\n      method: \"RMA\",\n      total\n    }\n  }\n];\n"
      },
      "name": "RSI 1h",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -160,
        280
      ],
      "id": "c841fbd5-ac98-468d-ba3d-a01903dd286d"
    },
    {
      "parameters": {
        "functionCode": "// Ëé∑ÂèñÂÆåÊï¥ÁöÑ K Á∫øÊï∞ÊçÆ\nconst klineList = $json.result.list;\nconst symbol = $json.result.symbol || \"UNKNOWN\";\n\n// Ëá™Âä®Êé®Êñ≠ base assetÔºàÂ¶Ç ETHUSDT ‚Üí ETHÔºâ\nconst baseAsset = symbol.replace(/USDT$/i, \"\") || \"BaseAsset\";\n\n// Ëá™Âä®ÈÄÇÈÖçÂë®ÊúüÊï∞Èáè\nconst limit = klineList.length;\n\n// ÂàùÂßãÂåñÊï∞ÁªÑ\nconst volumesBase = [];\nconst volumesUSDT = [];\nconst timestamps = [];\nconst detailedList = [];\n\n// Êó∂Èó¥Ê†ºÂºèÔºàUTC Á≤æÁ°ÆÂà∞Â∞èÊó∂Ôºâ\nfunction formatUTCHour(ms) {\n  const d = new Date(ms);\n  const year = d.getUTCFullYear();\n  const month = String(d.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(d.getUTCDate()).padStart(2, '0');\n  const hour = String(d.getUTCHours()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hour}:00`;\n}\n\n// ÈÅçÂéÜÊØèÊ†πKÁ∫ø\nfor (let i = 0; i < limit; i++) {\n  const item = klineList[i];\n  const timestamp = parseInt(item[0]);\n  const open = parseFloat(item[1]);\n  const close = parseFloat(item[4]);\n  const volumeBase = parseFloat(item[5]);\n  const avgPrice = (open + close) / 2;\n  const volumeUSDT = volumeBase * avgPrice;\n\n  volumesBase.push(volumeBase);\n  volumesUSDT.push(volumeUSDT);\n  timestamps.push(timestamp);\n\n  detailedList.push({\n    index: i + 1,\n    timeUTC: formatUTCHour(timestamp),\n    open,\n    close,\n    volumeBase,\n    volumeUSDT: volumeUSDT.toFixed(2),\n  });\n}\n\n// ËÆ°ÁÆóÊÄªÈáè‰∏éÂùáÂÄº\nconst totalVolumeBase = volumesBase.reduce((a, b) => a + b, 0);\nconst avgVolumeBase = totalVolumeBase / volumesBase.length;\n\nconst totalVolumeUSDT = volumesUSDT.reduce((a, b) => a + b, 0);\nconst avgVolumeUSDT = totalVolumeUSDT / volumesUSDT.length;\n\nreturn [\n  {\n    json: {\n      baseAsset,\n      sampleSize: limit,\n      totalVolumeBase: totalVolumeBase.toFixed(2),\n      avgVolumeBase: avgVolumeBase.toFixed(2),\n      totalVolumeUSDT: totalVolumeUSDT.toFixed(2),\n      avgVolumeUSDT: avgVolumeUSDT.toFixed(2),\n      detailedVolumes: detailedList\n    }\n  }\n];\n"
      },
      "name": "Volume 1h",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -160,
        420
      ],
      "id": "beed1cd7-6775-464c-88f8-aeccaa6805bd"
    },
    {
      "parameters": {
        "jsCode": "const lang = $json.lang || \"zh\";\n\n// ‚úÖ ‰ªé JSON ‰∏≠ÊèêÂèñÊâÄÊúâÈúÄË¶ÅÁöÑÊï∞ÊçÆ\nconst kline = ($json.result?.list || []).slice().reverse();\nconst macdList = ($json.macdList || []).slice().reverse();\nconst rsiList = ($json.rsi14 || []).slice().reverse();\nconst smaList = ($json.smaList || []).slice().reverse();  // ‚úÖ ÂºïÂÖ• SMA\n\nconst symbol = $json.symbol || \"UNKNOWN\";\nconst baseAsset = symbol.replace(/USDT|USDC|BUSD|TUSD|DAI|USD$/, \"\");\nconst limit = kline.length;\n\n// ‚úÖ ÊúÄÊñ∞Êó∂Èó¥ÔºàUTC+0 Á≤æÁ°ÆÂ∞èÊó∂Ôºâ\nconst latestDate = new Date(parseInt(kline[limit - 1][0])).toISOString().replace(\"T\", \" \").slice(0, 16);\n\n// ‚úÖ Êó•ÊúüÊò†Â∞ÑÔºàUTC+0 Â∞èÊó∂Ôºâ\nconst dateMap = kline.map(k =>\n  new Date(parseInt(k[0])).toISOString().replace(\"T\", \" \").slice(0, 16)\n);\n\n// ‚úÖ Ê†ºÂºèÂåñÂáΩÊï∞ÔºöÊ†πÊçÆÂÄºÂ§ßÂ∞èÂÜ≥ÂÆö‰øùÁïôÁöÑÂ∞èÊï∞‰ΩçÊï∞\nconst formatValue = (value) => {\n  const numValue = Number(value); // Ensure the value is a number\n  if (isNaN(numValue)) return \"N/A\"; // Return 'N/A' if the value is not a number\n\n  if (numValue === 0) {\n    return \"0\";  // If value is 0, return \"0\"\n  } else if (numValue > 1 || numValue < -1) {\n    return numValue.toFixed(2);  // If value is >1 or < -1, keep 2 decimal places\n  } else {\n    return numValue.toFixed(7);  // If value is between -1 and 1, keep 7 decimal places\n  }\n};\n\n// ‚úÖ KÁ∫øÊï∞ÊçÆÊñáÊú¨ÊãºÊé•\nlet totalVolUSDT = 0;\nconst klineText = kline.map((item, i) => {\n  const date = dateMap[i];\n  const open = parseFloat(item[1]);\n  const high = parseFloat(item[2]);\n  const low = parseFloat(item[3]);\n  const close = parseFloat(item[4]);\n  const vol = parseFloat(item[5]);\n  const avgPrice = (open + close) / 2;\n  const volUSDT = avgPrice * vol;\n  totalVolUSDT += volUSDT;\n\n  return lang === \"zh\"\n    ? `${date}ÔºöÂºÄÁõò${open}UÔºåÊúÄÈ´ò${high}UÔºåÊúÄ‰Ωé${low}UÔºåÊî∂Áõò${close}UÔºåÊàê‰∫§Èáè‚âà${volUSDT.toFixed(2)}USDT`\n    : `${date}: Open ${open}U, High ${high}U, Low ${low}U, Close ${close}U, Volume ‚âà${volUSDT.toFixed(2)}USDT`;\n}).join(\"\\n\");\n\nconst avgVolUSDT = totalVolUSDT / limit;\n\n// ‚úÖ MACD ËæìÂá∫\nconst macdText = macdList.length > 0\n  ? (lang === \"zh\"\n    ? `„ÄêMACD ÊåáÊ†á„Äë\\n` + macdList.map((item, i) =>\n        `${dateMap[i]}ÔºöDIF ${formatValue(item.DIF)}ÔºåDEA ${formatValue(item.DEA)}ÔºåÊü±Áä∂Âõæ ${formatValue(item.histogram)}`\n      ).join(\"\\n\")\n    : `„ÄêMACD„Äë\\n` + macdList.map((item, i) =>\n        `${dateMap[i]}: DIF ${formatValue(item.DIF)}, DEA ${formatValue(item.DEA)}, Histogram ${formatValue(item.histogram)}`\n      ).join(\"\\n\"))\n  : (lang === \"zh\" ? \"„ÄêMACD ÊåáÊ†á„Äë\\nÊöÇÊó†Êï∞ÊçÆ\" : \"„ÄêMACD„Äë\\nN/A\");\n\n// ‚úÖ RSI ËæìÂá∫\nconst rsiText = rsiList.length > 0\n  ? (lang === \"zh\"\n    ? `„ÄêRSI ÊåáÊ†á„Äë\\n` + rsiList.map(item =>\n        `${item.date}ÔºöÊî∂Áõò‰ª∑ ${item.close}UÔºåRSI ${formatValue(item.RSI)}`\n      ).join(\"\\n\")\n    : `„ÄêRSI„Äë\\n` + rsiList.map(item =>\n        `${item.date}: Close ${item.close}U, RSI ${formatValue(item.RSI)}`\n      ).join(\"\\n\"))\n  : (lang === \"zh\" ? \"„ÄêRSI ÊåáÊ†á„Äë\\nÊöÇÊó†Êï∞ÊçÆ\" : \"„ÄêRSI„Äë\\nN/A\");\n\n// ‚úÖ SMA ËæìÂá∫\nconst smaText = smaList.length > 0\n  ? (lang === \"zh\"\n    ? `„ÄêSMA ÂùáÁ∫ø„Äë\\n` + smaList.map(item =>\n        `${item.date}ÔºöÊî∂Áõò‰ª∑ ${item.close}UÔºåSMA14 ${formatValue(item.SMA14)}ÔºåSMA28 ${formatValue(item.SMA28)}ÔºåSMA60 ${formatValue(item.SMA60)}ÔºåSMA120 ${formatValue(item.SMA120)}`\n      ).join(\"\\n\")\n    : `„ÄêSMA„Äë\\n` + smaList.map(item =>\n        `${item.date}: Close ${item.close}U, SMA14 ${formatValue(item.SMA14)}, SMA28 ${formatValue(item.SMA28)}, SMA60 ${formatValue(item.SMA60)}, SMA120 ${formatValue(item.SMA120)}`\n      ).join(\"\\n\"))\n  : (lang === \"zh\" ? \"„ÄêSMA ÂùáÁ∫ø„Äë\\nÊöÇÊó†Êï∞ÊçÆ\" : \"„ÄêSMA„Äë\\nN/A\");\n\n// ‚úÖ Êàê‰∫§ÈáèËæìÂá∫\nconst volumeText = lang === \"zh\"\n  ? `„ÄêÊàê‰∫§ÈáèÁªüËÆ°„Äë\\nÂë®ÊúüÔºö${limit} Ê†πKÁ∫ø\\nÂçï‰ΩçÔºöÊàê‰∫§È¢ùÔºà‰º∞ÁÆóÔºåUSDTÔºâ\\nÂπ≥ÂùáÊàê‰∫§ÈáèÔºö${avgVolUSDT.toFixed(2)}U`\n  : `„ÄêVolume Stats„Äë\\nPeriod: ${limit} candles\\nUnit: Estimated USDT\\nAvg Volume: ${avgVolUSDT.toFixed(2)}U`;\n\n// ‚úÖ ÂàÜÊûêËØ¥Êòé\nconst promptHeader = lang === \"zh\"\n  ? `ËØ∑‰ΩøÁî®ÁÆÄ‰Ωì‰∏≠ÊñáÂõûÁ≠î‰ª•‰∏ãÈóÆÈ¢òÔºö\\n\\nüëâ Êï∞ÊçÆËØ¥ÊòéÔºö‰ª•‰∏ã K Á∫øÊï∞ÊçÆÊåâÊó∂Èó¥„Äå‰ªéÊóßÂà∞Êñ∞„ÄçÊéíÂàóÔºåÁ¨¨‰∏ÄË°å‰∏∫ÊúÄÊó©ÁöÑÊó∂Èó¥ÔºåÊúÄÂêé‰∏ÄË°åÊòØÂΩìÂâçÊúÄÊñ∞Êï∞ÊçÆ„ÄÇ\\n\\nËØ∑Âü∫‰∫é‰ª•‰∏ã„Äå1Â∞èÊó∂Á∫ßÂà´„ÄçÊï∞ÊçÆÔºàÂÖ± ${limit} Êù°ÔºâÔºåËøõË°åÂ∏ÇÂú∫ÊäÄÊúØÂàÜÊûêÔºö`\n  : `Please answer in English:\\n\\nüëâ Note: The K-line data is sorted from oldest to newest. The first row is the oldest, and the last row is the most recent.\\n\\nBased on the following 1-HOUR data (total ${limit} entries), provide technical market trend analysis:`;\n\n// ‚úÖ ÂàÜÊûê‰ªªÂä°Ôºö1Â∞èÊó∂‰∏ìÁî®\nconst askText = lang === \"zh\"\n  ? `ËØ∑‰Ω†Âü∫‰∫é‰ª•‰∏ä„Äå1Â∞èÊó∂Á∫ßÂà´„ÄçÊï∞ÊçÆÔºå‰ªéÊäÄÊúØÈù¢ÁöÑËßíÂ∫¶ËøõË°åÂàÜÊûêÔºö\n- Êä•Âëä ${latestDate} ÂΩìÂâçÊúÄÊñ∞‰ª∑Ê†º\n- Âà§Êñ≠Áü≠ÊúüË∂ãÂäøÔºà‰∏äÊ∂®/‰∏ãË∑å/ÈúáËç°Ôºâ\n- ÊòØÂê¶Âá∫Áé∞Áü≠Á∫ø‰π∞ÂÖ•/ÂçñÂá∫‰ø°Âè∑\n- RSI ÊòØÂê¶Âá∫Áé∞ >80 Ë∂Ö‰π∞Êàñ <20 Ë∂ÖÂçñ\n- MACD ÊòØÂê¶Áü≠Á∫øËÉåÁ¶ª\n- SMA ÊòØÂê¶ÊãêÂ§¥„ÄÅÊéíÂàó„ÄÅÁ≤òÂêà\n- K Á∫øÊòØÂê¶Âá∫Áé∞Â∞æÁõòÊãâÂçá„ÄÅÁü≠Á∫øÁ™ÅÁ†¥ÊàñÁõòÊï¥‰ø°Âè∑\n- ÂΩìÂâçÊòØÂê¶ÈÄÇÂêàÂø´ËøõÂø´Âá∫Êìç‰Ωú`\n  : `Based on the above 1-HOUR data:\n- Report the latest price as of ${latestDate}\n- Identify short-term trend (bullish/bearish/sideways)\n- Check for short-term buy/sell signals\n- Evaluate RSI for overbought (>80) or oversold (<20)\n- Identify short-term MACD divergence\n- Look for SMA signals like crossover, alignment, or consolidation\n- Identify breakout/consolidation or strong end-of-bar action\n- Evaluate if this zone is suitable for scalping or fast trades`;\n\nreturn [\n  {\n    json: {\n      aiPrompt: `${promptHeader}\\n\\n„ÄêKÁ∫øÊï∞ÊçÆ„Äë\\n${klineText}\\n\\n${macdText}\\n\\n${rsiText}\\n\\n${smaText}\\n\\n${volumeText}\\n\\n${askText}`\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        120
      ],
      "id": "c70ceea7-d019-4478-8716-d268aa46cf58",
      "name": "Format Prompt 1h"
    },
    {
      "parameters": {
        "url": "=https://api.bybit.com/v5/market/kline?category=linear&symbol={{$node[\"Set Variables\"].json[\"userInputUpper\"]}}&interval=60&limit=300",
        "options": {}
      },
      "name": "Fetch Kline 1h",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -320,
        20
      ],
      "id": "d53971ee-3621-4db4-8dbb-389f00a12e51"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Check Token in Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Valid?": {
      "main": [
        [
          {
            "node": "Valid Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Invalid Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Valid Response": {
      "main": [
        [
          {
            "node": "Fetch Kline 1h",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Token in Array": {
      "main": [
        [
          {
            "node": "IF Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Send Analysis To Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send Analysis To Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge 2 (1D+1W)4": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge 2 (1D+1W)5": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge 2 (1D+1W)6": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge 2 (1D+1W)": {
      "main": [
        [
          {
            "node": "Format Prompt 1h",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "sma14 28 60 120 1h": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MACD 1h": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "RSI 1h": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Volume 1h": {
      "main": [
        [
          {
            "node": "Merge 2 (1D+1W)4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Format Prompt 1h": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Kline 1h": {
      "main": [
        [
          {
            "node": "Volume 1h",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSI 1h",
            "type": "main",
            "index": 0
          },
          {
            "node": "MACD 1h",
            "type": "main",
            "index": 0
          },
          {
            "node": "sma14 28 60 120 1h",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge 2 (1D+1W)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "87791e2a-e177-4869-b7c6-f414a51b1100",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a39d36c7743e7678f61d20c8c1b31ab7ab72a22d50653111a4fd7897da14076c"
  },
  "id": "IY7p3LMjnsKkTbPR",
  "tags": []
}
